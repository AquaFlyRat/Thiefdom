<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_test</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
//movement
grav = .4;
hspd = 0;
vspd = 0;
slide = 0;
climb = 0;
grab = 0;
sheight = 3;
run_speed = 4;
jump_speed = 5;
slide_speed = 1;
climb_speed = .5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
var hs = (keyboard_check_direct(vk_right)-keyboard_check_direct(vk_left));
var jmp = (keyboard_check_pressed(vk_up));
var vs = (keyboard_check_direct(vk_down)-keyboard_check_direct(vk_up));
if hs !=0{hspd = lerp(hspd,hs*run_speed,.1)}else{hspd = lerp(hspd,0,.5)}
if slide || grab{hspd = 0;}
//grav, jump
if (!slide &amp;&amp; !climb &amp;&amp; !grab){
    vspd+=grav;
}else{
    if slide{vspd = slide_speed}
    if grab || climb{vspd = 0}
}
if (place_meeting(x,y+1,obj_solid) || place_meeting(x-(hs*8),y+1,obj_solid)) &amp;&amp; jmp{
    vspd=-jump_speed;
}
//slide
if vspd&gt;0 &amp;&amp; (place_meeting(x+1,y,obj_solid) || place_meeting(x-1,y,obj_solid)){
    slide = 1;
}
if slide &amp;&amp; place_meeting(x,y+8,obj_solid) || (!place_meeting(x+1,y,obj_solid) &amp;&amp; !place_meeting(x-1,y,obj_solid)) || (!place_meeting(x+1,y-8,obj_solid) &amp;&amp; !place_meeting(x-1,y-8,obj_solid)){
    slide = 0;
}
if slide &amp;&amp; (place_meeting(x+1,y-15,obj_solid) &amp;&amp; !place_meeting(x+1,y-16,obj_solid)) || (place_meeting(x-1,y-15,obj_solid) &amp;&amp; !place_meeting(x-1,y-16,obj_solid)){
    slide = 0;
    grab = 1;
}
if slide &amp;&amp; (jmp || (hs&gt;0 &amp;&amp; place_meeting(x-1,y,obj_solid)) || (hs&lt;0 &amp;&amp; place_meeting(x+1,y,obj_solid))){
    slide = 0;
    vspd = -jump_speed;
    if place_meeting(x-1,y,obj_solid){hs = 1;}
    if place_meeting(x+1,y,obj_solid){hs = -1;}
    hspd=hs*run_speed;
}
//grab
if grab &amp;&amp; jmp{
    grab = 0;
    vspd = -jump_speed;
}
if grab &amp;&amp; ((place_meeting(x-1,y,obj_solid) &amp;&amp; hs&gt;0) || (place_meeting(x+1,y,obj_solid) &amp;&amp; hs&lt;0) || vs&gt;0){
    grab = 0;
    hspd = hs*run_speed;
}
//climb
if place_meeting(x,y-1,obj_solid) &amp;&amp; !place_meeting(x,y+1,obj_solid){
    climb = 1;
}
if climb{
    hspd = hs*climb_speed;
    if (place_meeting(x-1,y,obj_solid) || place_meeting(x+1,y,obj_solid)){
        climb = 0;
        slide = 1;
    }
    if vs&gt;0{climb = 0;}
}
//colision x
if place_meeting(x+hspd,y,obj_solid){
    if vspd &gt;=0 &amp;&amp; !place_meeting(x+hspd,y-sheight,obj_solid){
        x+=hspd;
        while place_meeting(x,y+1,obj_solid){
            y-=1;
            vspd = 1;
        }
        ///hspd = 0;
    }else{
        while !place_meeting(x+sign(hspd),y,obj_solid){
            x+=sign(hspd);
        }
        hspd = 0;
    }
}
if !place_meeting(x+hspd,y,obj_solid){
    x+=hspd;
}
//colision y
if place_meeting(x,y+vspd,obj_solid){
    while !place_meeting(x,y+sign(vspd),obj_solid){
        y+=sign(vspd);
    }
    vspd = 0;
}
y+=vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
