<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ctrl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>socket_id = noone;
state = NET_CLIENT_DISCONNECTED;

send_buffer = buffer_create(1024, buffer_fixed, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle NET_CLIENT_REQUESTING_CONNECTION state

// If the clients is requesting connection
// Then send packets continiously to the server until the
// Server responds with a challenge packet.
if(state == NET_CLIENT_REQUESTING_CONNECTION) {
    buffer_seek(self.send_buffer, buffer_seek_start, 0);
    buffer_write(self.send_buffer, buffer_u32, NET_PACKET_UID);
    buffer_write(self.send_buffer, buffer_u16, NET_PCK_CONNECTION_REQUEST);
    
    udp_send_to_server(self.socket_id, self.send_buffer, 6);
    
    alarm[0] = room_speed * (1 / NET_CLIENT_UPDATE_SPD);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// The socket that is recieving the data (aka the socket the server is on)
var socket_id = ds_map_find_value(async_load, "id");

if(socket_id == self.socket_id) {
    var type = async_load[? "type"];
    switch(type) {
    case network_type_data:
        var in_buffer = async_load[? "buffer"];
        var header_uid = buffer_read(in_buffer, buffer_u32);
        
        if(header_uid == NET_PACKET_UID) {
            var msg_type = buffer_read(in_buffer, buffer_u16);
            switch(msg_type) {
            case NET_PCK_CONNECTION_ACCEPTED:
                if(self.state != NET_CLIENT_CONNECTED)
                    debug_message("Client connection request accepted!");
                self.state = NET_CLIENT_CONNECTED;
                break;
            case NET_PCK_CONNECTION_REJECTED:
                debug_message("Client connection request rejected!");
                self.state = NET_CLIENT_DISCONNECTED;
            }
        }
        
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
